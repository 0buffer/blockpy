Table Block
Assessment API/Blocks

Time rewinder
Tooltips over errors
Connect blocks to text by storing line numbers in the converted AST
Multiple block levels by manipulating the paths in the block.js file
    Remove color, reduce padding, simplify text
    Swap append order
    Drop "set" from assignment
    Add colons onto the end of lines
    create empty list becomes []
Add in variable dictionary access block
Tabular block
Add the word "module" to datasets
Call friend
    Identifies students in the cohort who are on the same problem
    Signals to the TA that the student has an issue
    Emails a question to the TA
Dramatically improve weather et al API naming conventions
    Fix the crime dataset
Default provide if, if/else, if/elif/else blocks
Static analysis
Upload images so they can be reported to the user
Popup question dialog
    Fill in the blank
    Multiple choice
        What variable is a dictionary (selectable list of variables) - optionally show type.
    TAs see answers to questions
Side-by-side views of code and blocks with the mappings

If then else - logic for instructor API
    Allowed to write python snippets
    Should the whole thing translate to python?
    
Put examples on the left of the canvas, to make suggestions as you type.
Input block
Turn off name wrangler? It might be better to let them make mistakes and then point them out.
Highlight parser error line in the code block!

Instead of having it shown as a value changing, visualize it as a cursor moving through list
    Integrate with JSAV
Predict the next value of the trace
Explain a given line of code
"All the variables you need are here" <-- prevent them from creating new variables.

Walk the AST to add in unique IDs. When an exception occurs, the exact ID of the parse tree can be returned. This ID can be used to identify the relevant block, and the "lineno"/"endlineno"/"colno"/"endcolno" can be used to identify the exact code snippet. Additionally, we can report out the error more clearly - explain the actual type of the object, the expected type of the object, and even other suitable objects from the static analyzer.

Slowmode - when you run, it executes the code but "plays" its results slightly slowed down, so you can see the code highlighting.

Multiple levels of blocks (Block sets)



CT-server
    Datasets
    Blockpy
    Maze
    
    
Quick look - this seems really nice! One question that this raises in my mind is the equivalent of NetLogo's "info" tab - the description of the data, what the data fields are, what questions could be asked.  It seems very labor intensive to create this kind of information (and some expertise as well in some cases), but maybe this is was a highly curated data set needs?

As a tactical matter, we have to be in a position to "guide" students toward "interesting" questions to convey the idea that this is not just random graphing of data - but that something can be learned from it.